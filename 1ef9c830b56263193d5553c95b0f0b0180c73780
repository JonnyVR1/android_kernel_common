Revision: 1ef9c830b56263193d5553c95b0f0b0180c73780
Patch-set: 8
File: security/selinux/avc.c

274
Tue Mar 03 16:29:35 2015 +0000
Author: Stephen Smalley <1010099@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72147288_0776b80b
Bytes: 160
This assumes that dest was allocated with the same specified flags as src.  Is that a safe assumption?  Kernel with this patch crashes in this function on boot.

274
Tue Mar 03 17:16:03 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72147288_0776b80b
UUID: 12e976fa_71e058c2
Bytes: 69
Hmm...the fix for this didn't end up in this commit. I'll upload now.

683
Tue Mar 03 14:02:39 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 32c11a6d_7a013931
Bytes: 140
Why not check for this within this function and avoid the need to separately call avc_operation_in_range, as the only user does this anyway?

File: security/selinux/ss/avtab.c

569
Tue Mar 03 14:02:39 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d20a7e5c_95c5a4b7
Bytes: 351
Need to update avtab_write_item to also write out the operations.  This is used to generate the policy file readable via /sys/fs/selinux/policy, used to obtain the currently loaded kernel policy for analysis/testing.  Should be essentially the same logic as used in the corresponding libsepol functions but just using the kernel types and conventions.

569
Wed Mar 04 14:43:22 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d20a7e5c_95c5a4b7
UUID: 32d75a80_0a2f5b8b
Bytes: 426
Note that avtab_write/avtab_write_item in the kernel do not need to support policyvers < POLICYDB_VERSION_AVTAB, as this is prohibited at the beginning of policydb_write().  This is because /sys/fs/selinux/policy support was added long after that version change and it wasn't viewed as worthwhile to bring in the legacy support from libsepol.  But you do need to support the before and after cases for your new policy version.

File: security/selinux/ss/services.c

622
Tue Mar 03 14:02:39 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 32c11a6d_fa5ae95c
Bytes: 490
So, we could end up denying an operation allowed by policy simply because we end up running out of space in the operation_range while merging multiple allow rules written on different attributes associated with the type, right?  And that truncation of the allowed operations would be silent?  Should we at least log if we bump up against the max operation range len during the merge for debugging purposes?  Is checkpolicy/libsepol doing anything to help detect/prevent this from happening?

622
Tue Mar 03 17:16:03 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 32c11a6d_fa5ae95c
UUID: 72ce32a5_94f4e459
Bytes: 117
Yes, the plan is to add checks in the policy compiler to make sure this doesn't occur. I'll add the logging here too.

