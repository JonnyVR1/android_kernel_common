Revision: 0be80d8e4268cdceaa1d7ea9caa13bee2112c1d6
Patch-set: 1
File: include/linux/lsm_audit.h

72
Thu Jan 15 15:16:12 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b2473a4_99e25f2d
Bytes: 211
Could make this a struct containing both the struct path (or dentry or whatever) and the unsigned int ioctlcmd and then display them both together on denials.  Also, this file diff belongs with the other change.

File: security/selinux/hooks.c

92
Thu Jan 15 15:16:12 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb106340_dd6c3f75
Bytes: 181
I'd put this file diff with the change that creates this header file. More generally, you only need at most two changes - one for the general LSM infrastructure and one for SELinux.

3137
Thu Jan 15 15:16:12 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b2473a4_39eb4b08
Bytes: 22
Use cred_sid() helper.

3142
Thu Jan 15 15:16:12 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb106340_9d76c73f
Bytes: 90
Use a struct so you can pass both the path and the cmd for inclusion in the audit message.

3143:35-3143:48
Thu Jan 15 02:10:54 2015 +0000
Author: Nick Kralevich <1003966@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb106340_faa0297a
Bytes: 411
a file descriptor could represent a plain file, character file, unix domain socket, etc... All of these can have ioctls performed on them.

It feels wrong to use SECLASS_FILE here, since it could also be a SECCLASS_CHR_FILE or SECCLASS_TCP_SOCKET depending on how it's called.

Stephen: are there any functions available which take a file descriptor, and return the SECCLASS appropriate to that file descriptor?

3143:35-3143:48
Thu Jan 15 03:10:52 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb106340_faa0297a
UUID: 2b051bfe_65f0fc21
Bytes: 188
Good catch! I believe that could be accessed by:

struct inode_security_struct *isec;
struct inode *inode = file_inode(file);
isec = inode->i_security;
isec->sclass

I will update tomorrow

3144
Thu Jan 15 15:16:12 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b2473a4_19f08fee
Bytes: 336
This is problematic; you are reusing an existing class/permission combination for a completely different purpose and different target context.  You really need a new permission for this check.  And it has to be added to COMMON_FILE_SOCK_PERMS in security/selinux/include/classmap.h so that it is defined for all file and socket classes.

