Revision: 99364866cacdea7e00c561d45dc9511dc12274d7
Patch-set: 2
File: /COMMIT_MSG

24:37-24:38
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bbf18df_77e4b059
Bytes: 23
nit: whitespace needed.

File: security/selinux/hooks.c

3131:3-3131:4
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ebca2890_b3b818c4
Bytes: 123
note: this differs from the file_has_perm() indentation of the same code, but that includes spaces and is likely incorrect.

File: security/selinux/operations.c

43
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b08ccac_68806392
Bytes: 30
no latest_notif functionality?

43
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b08ccac_68806392
UUID: 0b205c81_071f385e
Bytes: 168
I think it will need to be added eventually. However I'm reluctant to add code that I can't test. Is there a way to load new policy during runtime on an Android device?

43
Fri Feb 20 14:05:38 2015 +0000
Author: Stephen Smalley <1010111@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b205c81_071f385e
UUID: 288a862f_4dd2b990
Bytes: 115
adb push out/target/product/<board>/root/sepolicy /data/local/tmp
adb shell
su
load_policy /data/local/tmp/sepolicy

132:2-132:29
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b205c81_c4e27ed8
Bytes: 45
kernel style guide re brackets here and below

132:2-132:29
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b205c81_c4e27ed8
UUID: 6b31d8d0_6a3d17b5
Bytes: 255
Ah, I missed that in the coding style. Good catch!

This does not apply if only one branch of a conditional statement is a single
statement; in the latter case use braces in both branches:

if (condition) {
	do_this();
	do_that();
} else {
	otherwise();
}

215:1-218:13
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b6398c4_7d0cef63
Bytes: 144
maybe just "return node;"?  The branch here was necessary in the avc code because it kept track of cache misses, which we don't seem to do here.

328:3-329:13
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b31d8d0_8737a60b
Bytes: 37
see below comment re kernel brackets.

332:1-333:11
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b31d8d0_e7d1425a
Bytes: 163
nit - kernel style guide: "This does not apply if only one branch of a conditional statement is a single
statement; in the latter case use braces in both branches"

392:41-392:42
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b644c9b_a8d19b5a
Bytes: 10
permission

394:3-394:48
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b644c9b_88ccd7c1
Bytes: 34
this isn't quite accurate anymore.

394:3-394:48
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b644c9b_88ccd7c1
UUID: 6b31d8d0_2ac07f20
Bytes: 65
Class is still considered in the same way in the security server.

406:5-406:21
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b728058_70fb8ecd
Bytes: 116
kernel coding style: "Don't put multiple assignments on a single line either.  Kernel coding style is super simple."

421
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b993cf9_02370e0a
Bytes: 46
We could call rcu_read_unlock() here, perhaps?

421
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b993cf9_02370e0a
UUID: 48241aa4_f6cba054
Bytes: 98
It's there for a future change. Logic for handling new policy load is going to go here eventually.

455:1-456:11
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b513ca8_7c7839a8
Bytes: 143
Is there a reason we're relying on selinux_enabled here rather than calling sel_operation_init() from selinux_init, as is done with avc_init()?

455:1-456:11
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b513ca8_7c7839a8
UUID: 48241aa4_b6cf6830
Bytes: 99
Not particularly. This is more following precedence from the other caches (netport, netif netnode).

File: security/selinux/ss/avtab.h

45:0-50:2
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b644c9b_a852fb53
Bytes: 14
please remove.

File: security/selinux/ss/services.c

621:24-621:25
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b585ce4_c7d88033
Bytes: 22
and operation decision

631:1-631:23
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bd55878_67de1291
Bytes: 7
needed?

671:6-671:42
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b993cf9_1f7be7a6
Bytes: 149
This reassigns the operation_decision allowed operation every time new policy concerning it is encountered, rather than combining allowed operations.

671:6-671:42
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b993cf9_1f7be7a6
UUID: 48525a24_06b39a97
Bytes: 206
The plan was to combine operation ranges in the policy compiler to ensure only one range array, but based on our offline discussion, that may get really messy (due to attributes). Back to the drawing board.

677:6-677:44
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b6398c4_fad1e559
Bytes: 10
see above.

683:6-683:43
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b6398c4_1ad7794d
Bytes: 10
see above.

689:3-689:56
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb95c8bd_bef4b50f
Bytes: 51
Will likely need to add ioctl support here as well.

703:3-703:45
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b6398c4_1a2cd9b9
Bytes: 51
Will likely need to add ioctl support here as well.

703:3-703:45
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6b6398c4_1a2cd9b9
UUID: 48525a24_c6e1024b
Bytes: 133
was not planning on adding constraint support for ranges. This maintains the ability to use constraints to disallow all ioctl access.

708:1-723:2
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb95c8bd_9e9e19d4
Bytes: 70
Not needed, I think, as we will never be checking this for ioctl perm.

730:1-731:18
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb95c8bd_de7fc1c9
Bytes: 94
Will likely need to add ioctl support here as well (although I don't know what this is doing).

1035:1-1035:51
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be9ac2d_e019627b
Bytes: 23
nit: kernel-style guide

1076:5-1076:6
Wed Feb 18 23:13:24 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be9ac2d_60d432f5
Bytes: 14
This is weird.

1076:5-1076:6
Thu Feb 19 17:51:20 2015 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be9ac2d_60d432f5
UUID: 48525a24_465ab270
Bytes: 208
Agreed. Checkout how avd is initialized.

	avd->allowed = 0;
	avd->auditallow = 0;
	avd->auditdeny = 0xffffffff;

An auditdeny permission is "set" by zeroing that bit - the opposite of allowed and auditallow.

