Revision: 4d32fe0e87736876ba84bcae6db71da6eb677223
Patch-set: 1
File: /COMMIT_MSG

7
Fri May 15 20:46:18 2015 +0000
Author: Arve Hjønnevåg <1000205@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0da4fdb8_8b99d752
Bytes: 17
specify component

7
Fri May 15 21:16:26 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0da4fdb8_8b99d752
UUID: eda6c9c2_03fea7aa
Bytes: 41
e.g. "android: binder: Fix BR_ERROR ..."?

7
Fri May 15 21:27:18 2015 +0000
Author: Arve Hjønnevåg <1000205@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eda6c9c2_03fea7aa
UUID: eda6c9c2_83eb77a7
Bytes: 141
yes that will work. Usually it is best to use the same prefix as other changes to the file, but this one has a lot of different formats used.

13
Fri May 15 20:46:18 2015 +0000
Author: Arve Hjønnevåg <1000205@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0da4fdb8_0ba5e77f
Bytes: 96
Does libbinder already handle these new return values correctly, or does it also need to change?

13
Fri May 15 21:16:26 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0da4fdb8_0ba5e77f
UUID: 0da4fdb8_2b9b8bbd
Bytes: 389
IPCThreadState already assumes this with:
case BR_ERROR:
        result = mIn.readInt32()

I'm actually not sure what the practical result of this would be for the one case where BR_ERROR was already being used (in the case of a failed allocation of binder_ref_death struct when processing a BC_CLEAR_DEATH_NOTIFICATION), as an extra, unprovided 4 bytes would be read from the read buffer.

13
Fri May 15 21:27:18 2015 +0000
Author: Arve Hjønnevåg <1000205@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0da4fdb8_2b9b8bbd
UUID: 0da4fdb8_96b81ad9
Bytes: 65
That would be fatal, but those allocations never fail on android.

File: drivers/android/binder.c

2190
Fri May 15 20:46:18 2015 +0000
Author: Arve Hjønnevåg <1000205@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cd8d8546_ed26e8e4
Bytes: 65
This should be checked before writing the first part of BR_ERROR.

2190
Fri May 15 21:16:26 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd8d8546_ed26e8e4
UUID: cd8d8546_cd284c03
Bytes: 186
There is no change in behavior here.  The first check is done above in ptr < end, although it could be argued that these checks should also make sure that ptr <= (end - sizeof(uint32_t))

2190
Fri May 15 21:27:18 2015 +0000
Author: Arve Hjønnevåg <1000205@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd8d8546_cd284c03
UUID: cd8d8546_087de22c
Bytes: 276
There is a change in behavior since BR_ERROR will now be returned, where in practice it is never returned with the existing driver. Also, with the new code added below you may return BR_ERROR for the same error more than once, since it is only cleared after writing the param.

2190
Fri May 15 23:41:03 2015 +0000
Author: Daniel Cashman <1026058@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd8d8546_087de22c
UUID: 0da4fdb8_dc68036a
Bytes: 466
I guess what I mean is that adding an "if (ptr == end)" before the first put_user() call is pointless since immediately before it we already ensure ptr < end.  Should I be checking before copying the thread->return_error that "ptr <= end - (sizeof(uint32_t) + sizeof(int32_t))" in the case of BR_ERROR?  In that case, we'd not record BR_ERROR unless there were enough room for the param as well.  I'm assuming we used "ptr == end" before due to alignment guarantees?

