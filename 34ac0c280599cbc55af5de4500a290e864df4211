Revision: 34ac0c280599cbc55af5de4500a290e864df4211
Patch-set: 1
File: drivers/mmc/core/core.c

68:0-69:38
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_ebc71d10
Bytes: 74
Why not place actual function here? (at least give the optimizer a chance)

2917:0-2917:11
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_8b069977
Bytes: 25
static const

u_int64_t ?

2917:0-2941:2
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_0ba0493a
Bytes: 124
If you move this into include/linux/mmc/host.h you can get away from allocating the bucket arrays as you know the ARRAY_SIZE

2948:54-2948:57
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_8b6f792f
Bytes: 92
latency_x_axis_us[0]

Which leads to replacing this all with:

ARRAY_SIZE(latency_x_axis_us)

2957:1-2957:38
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_eb5ddd7e
Bytes: 127
I am expecting:

i == (sizeof(latency_x_axis_us) / sizeof(latency_x_axis_us[0]))

or rather

i == ARRAY_SIZE(latency_x_axis_us)

2972:38-2972:63
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_cbe7c1a9
Bytes: 176
sizeof(host->latency_y_axis_read[0]) * sizeof(latency_x_axis_us) / sizeof(latency_x_axis_us[0])

or rather

sizeof(host->latency_y_axis_read[0]) * ARRAY_SIZE(latency_x_axis_us)

2993:12-2993:13
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_eb515d0b
Bytes: 58
space prohibited before semicolon by linux coding standard

2994:52-2994:55
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_4b865178
Bytes: 24
use ARRAY_SIZE macro ...

3006:2-3006:27
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_ab5b5527
Bytes: 231
snprintf is deprecated, use scnprintf to _accurately_ uptick the bytes_written.

snprintf returns the number of bytes that it wants to write, scnprintf returns the number of bytes that were actually written.

Please audit all uses.

3016:12-3016:13
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_8b63f9eb
Bytes: 58
space prohibited before semicolon by linux coding standard

3028:2-3028:32
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_6b91cd9d
Bytes: 107
percent is kind of course, what about permille? (eg "...%d.%d%%...", ... permille / 10, permille % 10, ...)

3052:14-3052:15
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_2b2c25b1
Bytes: 7
#define

3066:2-3067:29
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_0b1da964
Bytes: 54
dev_err(&host->class_dev, "Failed to create....\n"); ?

3093:0-3094:35
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_2b2f4590
Bytes: 168
If size is known, and we know that it is relatively small in size, we can set the array size statically/compile-time and stay away from memory leaks or race conditions.

File: include/linux/mmc/host.h

381:1-381:4
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_8bb9b992
Bytes: 9
unsigned?

381:1-382:31
Fri Aug 05 20:28:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b99e1320_2ba98529
Bytes: 71
Drop axis_ovf_read in favour of a +1 on the sizeof latency_y_axis_read?

